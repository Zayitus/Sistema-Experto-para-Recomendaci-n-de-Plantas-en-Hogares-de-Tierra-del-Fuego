"""
Sistema Experto para Recomendaci√≥n de Plantas en Tierra del Fuego
Clase principal que integra todas las funcionalidades
CON VALIDACI√ìN ESTRICTA DE UBICACI√ìN Y OBJETIVO
"""

import sys
import os
from plants_data import PLANTAS
from rules import RuleEngine
from decision_tree import DecisionTree
import random

class PlantExpertSystem:
    """
    Sistema Experto principal para recomendaci√≥n de plantas fueguinas
    CON FILTROS CR√çTICOS DE UBICACI√ìN Y OBJETIVO ESPEC√çFICO
    """
    
    def __init__(self):
        self.plantas = PLANTAS
        self.rule_engine = RuleEngine()
        self.decision_tree = DecisionTree()
        self.session_history = []
    
    def get_plant_recommendation(self, user_conditions):
        """
        Funci√≥n principal que genera recomendaciones basadas en condiciones del usuario
        CON VALIDACI√ìN ESTRICTA DE UBICACI√ìN Y OBJETIVO EN CADA PASO
        
        Args:
            user_conditions (dict): Condiciones proporcionadas por el usuario
            
        Returns:
            dict: Recomendaciones con explicaciones y nivel de confianza
        """
        try:
            ubicacion_solicitada = user_conditions.get('ubicacion', 'interior')
            objetivo_solicitado = user_conditions.get('objetivo_principal', 'ninguno')
            print(f"üîç SISTEMA EXPERTO INICIADO:")
            print(f"   üìç Ubicaci√≥n: '{ubicacion_solicitada}'")
            print(f"   üéØ Objetivo: '{objetivo_solicitado}'")
            
            # 1. Aplicar reglas de filtrado (incluye filtros cr√≠ticos de ubicaci√≥n y objetivo)
            print(f"\nüìã PASO 1: Aplicando reglas de producci√≥n...")
            filtered_plants = self.rule_engine.apply_rules(user_conditions, self.plantas)
            print(f"üìã RESULTADO REGLAS: {len(filtered_plants)} plantas aprobadas")
            
            # 2. Evaluar con √°rbol de decisi√≥n (incluye filtros de ubicaci√≥n y objetivo)
            print(f"\nüå≥ PASO 2: Evaluando con √°rbol de decisi√≥n...")
            tree_recommendations = self.decision_tree.evaluate_conditions(user_conditions)
            print(f"üå≥ RESULTADO √ÅRBOL: {len(tree_recommendations)} plantas recomendadas")
            
            # 3. Combinar resultados CON VALIDACI√ìN FINAL DE UBICACI√ìN Y OBJETIVO
            print(f"\nüîó PASO 3: Combinando resultados...")
            final_recommendations = self._combine_recommendations_with_strict_validation(
                filtered_plants, tree_recommendations, user_conditions
            )
            
            # 4. Generar explicaciones detalladas
            print(f"\nüìù PASO 4: Generando explicaciones...")
            for rec in final_recommendations:
                rec['explicacion_detallada'] = self._generate_detailed_explanation(
                    rec, user_conditions
                )
            
            # 5. Guardar en historial
            self.session_history.append({
                'condiciones': user_conditions,
                'recomendaciones': final_recommendations
            })
            
            print(f"\n‚úÖ PROCESO COMPLETADO: {len(final_recommendations)} recomendaciones finales")
            for rec in final_recommendations:
                categoria = rec['datos_planta'].get('categoria', 'N/A')
                print(f"   ‚úÖ {rec['nombre']} ({categoria}): {rec['confianza']:.1f}% confianza")
            
            return {
                'success': True,
                'recomendaciones': final_recommendations,
                'total_plantas_evaluadas': len(self.plantas),
                'metodo_inferencia': 'reglas + arbol_decision + filtro_ubicacion_objetivo'
            }
            
        except Exception as e:
            print(f"‚ùå ERROR EN SISTEMA EXPERTO: {str(e)}")
            return {
                'success': False,
                'error': str(e),
                'recomendaciones': []
            }
    
    def _combine_recommendations_with_strict_validation(self, rule_results, tree_results, conditions):
        """
        Combina resultados de reglas y √°rbol de decisi√≥n CON VALIDACI√ìN FINAL ESTRICTA
        """
        combined = {}
        ubicacion_usuario = conditions.get('ubicacion', 'interior')
        objetivo_usuario = conditions.get('objetivo_principal')
        
        print(f"üîó COMBINANDO con validaci√≥n estricta:")
        print(f"   üìç Ubicaci√≥n: '{ubicacion_usuario}'")
        print(f"   üéØ Objetivo: '{objetivo_usuario}'")
        print(f"   üìã Reglas: {len(rule_results)} plantas")
        print(f"   üå≥ √Årbol: {len(tree_results)} plantas")
        
        # Agregar resultados de reglas (YA est√°n filtradas por las reglas cr√≠ticas)
        for plant_id, confidence in rule_results.items():
            if plant_id in self.plantas and confidence > 0:
                
                # VALIDACI√ìN FINAL ESTRICTA
                if not self._is_strictly_compatible(plant_id, conditions):
                    print(f"   ‚ùå REGLAS - {plant_id}: ELIMINADA en validaci√≥n final estricta")
                    continue
                
                combined[plant_id] = {
                    'planta_id': plant_id,
                    'nombre': self.plantas[plant_id]['nombre_comun'],
                    'confianza': confidence,
                    'fuente': 'reglas',
                    'datos_planta': self.plantas[plant_id]
                }
                categoria = self.plantas[plant_id].get('categoria', 'N/A')
                print(f"   ‚úÖ REGLAS - {plant_id} ({categoria}): {confidence:.1f}% confianza")
        
        # Agregar/actualizar con resultados del √°rbol (CON VALIDACI√ìN FINAL)
        for result in tree_results:
            plant_id = result['planta']
            
            # VALIDACI√ìN FINAL ESTRICTA
            if not self._is_strictly_compatible(plant_id, conditions):
                print(f"   ‚ùå √ÅRBOL - {plant_id}: ELIMINADA en validaci√≥n final estricta")
                continue
            
            if plant_id in combined:
                # Promedio ponderado de confianzas
                old_confidence = combined[plant_id]['confianza']
                combined[plant_id]['confianza'] = (old_confidence * 0.6 + result['confianza'] * 0.4)
                combined[plant_id]['fuente'] = 'reglas + arbol'
                categoria = self.plantas[plant_id].get('categoria', 'N/A')
                print(f"   üîÑ COMBINADO - {plant_id} ({categoria}): {combined[plant_id]['confianza']:.1f}% confianza")
            else:
                if plant_id in self.plantas:
                    combined[plant_id] = {
                        'planta_id': plant_id,
                        'nombre': self.plantas[plant_id]['nombre_comun'],
                        'confianza': result['confianza'],
                        'fuente': 'arbol',
                        'datos_planta': self.plantas[plant_id]
                    }
                    categoria = self.plantas[plant_id].get('categoria', 'N/A')
                    print(f"   ‚úÖ √ÅRBOL - {plant_id} ({categoria}): {result['confianza']}% confianza")
        
        # Convertir a lista y ordenar por confianza
        recommendations = list(combined.values())
        recommendations.sort(key=lambda x: x['confianza'], reverse=True)
        
        print(f"üîó COMBINACI√ìN FINAL: {len(recommendations)} plantas v√°lidas")
        
        # Retornar top 3
        return recommendations[:3]
    
    def _is_strictly_compatible(self, plant_id, conditions):
        """
        VALIDACI√ìN FINAL ESTRICTA: Verifica compatibilidad total con ubicaci√≥n Y objetivo
        """
        if plant_id not in self.plantas:
            return False
        
        plant_data = self.plantas[plant_id]
        categoria_planta = plant_data.get('categoria', 'interior')
        ubicacion_usuario = conditions.get('ubicacion', 'interior')
        objetivo_usuario = conditions.get('objetivo_principal')
        
        # VALIDACI√ìN 1: Compatibilidad de ubicaci√≥n
        ubicacion_compatible = False
        if ubicacion_usuario == 'interior':
            ubicacion_compatible = categoria_planta in ['interior', 'comestible', 'ambos']
        elif ubicacion_usuario == 'exterior_protegido':
            ubicacion_compatible = categoria_planta in ['exterior_protegido', 'comestible', 'ambos']
        elif ubicacion_usuario == 'ambos':
            ubicacion_compatible = True
        
        # VALIDACI√ìN 2: Compatibilidad de objetivo (CR√çTICA)
        objetivo_compatible = True  # Por defecto compatible si no hay objetivo espec√≠fico
        
        if objetivo_usuario == 'comestible':
            # ESTRICTO: Solo plantas comestibles o calafate
            objetivo_compatible = (categoria_planta == 'comestible' or plant_id == 'calafate')
            
        elif objetivo_usuario == 'nativas':
            # ESTRICTO: Solo plantas nativas
            objetivo_compatible = plant_data.get('planta_nativa', False)
            
        elif objetivo_usuario == 'purificar_aire':
            # ESTRICTO: Solo plantas que purifican aire
            objetivo_compatible = plant_data.get('purifica_aire', False)
            
        elif objetivo_usuario == 'decorativo':
            # Para decorativo: priorizar ornamentales, evitar comestibles
            objetivo_compatible = categoria_planta in ['interior', 'exterior_protegido', 'ambos']
            
        elif objetivo_usuario == 'facil_cuidado':
            # Para f√°cil cuidado: principiantes o nativas f√°ciles
            dificultad = plant_data.get('dificultad', 'intermedio')
            es_nativa = plant_data.get('planta_nativa', False)
            objetivo_compatible = (dificultad == 'principiante' or (es_nativa and dificultad != 'avanzado'))
        
        # VALIDACI√ìN 3: Mascotas (si est√°n presentes)
        mascotas_compatible = True
        if conditions.get('mascotas_presentes', False):
            mascotas_compatible = not plant_data.get('toxica_mascotas', False)
        
        compatible = ubicacion_compatible and objetivo_compatible and mascotas_compatible
        
        # Debug para casos espec√≠ficos
        if plant_id == 'pothos' and not compatible:
            print(f"   üîç POTHOS VALIDACI√ìN FINAL:")
            print(f"      - Categor√≠a: {categoria_planta}")
            print(f"      - Ubicaci√≥n OK: {ubicacion_compatible}")
            print(f"      - Objetivo OK: {objetivo_compatible} (objetivo: {objetivo_usuario})")
            print(f"      - Mascotas OK: {mascotas_compatible}")
            print(f"      - RESULTADO: {compatible}")
        
        return compatible
    
    def _generate_detailed_explanation(self, recommendation, conditions):
        """
        Genera explicaci√≥n detallada para una recomendaci√≥n
        INCLUYE VALIDACI√ìN DE UBICACI√ìN Y OBJETIVO EN LA EXPLICACI√ìN
        """
        plant_data = recommendation['datos_planta']
        explanations = []
        
        # Explicaci√≥n por compatibilidad de ubicaci√≥n (NUEVA)
        ubicacion_usuario = conditions.get('ubicacion')
        categoria_planta = plant_data.get('categoria')
        
        if ubicacion_usuario == 'interior' and categoria_planta == 'interior':
            explanations.append("üè† UBICACI√ìN PERFECTA: Dise√±ada espec√≠ficamente para cultivo en interior")
        elif ubicacion_usuario == 'exterior_protegido' and categoria_planta == 'exterior_protegido':
            explanations.append("üå≥ UBICACI√ìN IDEAL: Perfecta para jardines exteriores protegidos del clima fueguino")
        elif categoria_planta == 'ambos':
            explanations.append("üîÑ VERS√ÅTIL: Puede cultivarse tanto en interior como exterior seg√∫n la temporada")
        elif categoria_planta == 'comestible':
            explanations.append("üåø COMESTIBLE: Planta de hierbas que se adapta a diferentes ubicaciones")
        
        # Explicaci√≥n por objetivo espec√≠fico (NUEVA)
        objetivo_usuario = conditions.get('objetivo_principal')
        if objetivo_usuario == 'comestible' and categoria_planta == 'comestible':
            explanations.append("üçÉ OBJETIVO CUMPLIDO: Proporciona hierbas frescas para uso culinario")
        elif objetivo_usuario == 'nativas' and plant_data.get('planta_nativa', False):
            explanations.append("üå≥ PATRIMONIO NATURAL: Especie nativa que preserva la flora aut√≥ctona fueguina")
        elif objetivo_usuario == 'purificar_aire' and plant_data.get('purifica_aire', False):
            explanations.append("üí® AIRE PURO: Filtra contaminantes y mejora la calidad del aire interior")
        elif objetivo_usuario == 'decorativo':
            explanations.append("üé® VALOR DECORATIVO: A√±ade belleza y vida a tu espacio")
        elif objetivo_usuario == 'facil_cuidado':
            explanations.append("üå± F√ÅCIL CUIDADO: Requiere m√≠nimo mantenimiento, ideal para principiantes")
        
        # Explicaci√≥n por luz
        luz_usuario = conditions.get('luz_disponible', 'moderada')
        luz_planta = plant_data.get('luz_minima', 'moderada')
        if self._is_light_compatible(luz_usuario, luz_planta):
            explanations.append(f"‚òÄÔ∏è COMPATIBILIDAD DE LUZ: Perfecta para condiciones de luz {luz_usuario}")
        
        # Explicaci√≥n por humedad
        humedad_usuario = conditions.get('humedad_interior', 'media')
        humedad_planta = plant_data.get('humedad_requerida', 'media')
        if humedad_usuario == humedad_planta or humedad_planta == 'baja':
            explanations.append(f"üíß HUMEDAD IDEAL: Se adapta perfectamente a la humedad {humedad_usuario} t√≠pica de hogares fueguinos con calefacci√≥n")
        
        # Explicaci√≥n por experiencia
        experiencia = conditions.get('experiencia_usuario', 'principiante')
        dificultad = plant_data.get('dificultad', 'intermedio')
        if (experiencia == 'principiante' and dificultad == 'principiante') or \
           (experiencia == 'intermedio' and dificultad in ['principiante', 'intermedio']):
            explanations.append(f"üë§ NIVEL ADECUADO: Perfecta para tu nivel de experiencia ({experiencia})")
        
        # Explicaci√≥n por mascotas
        if conditions.get('mascotas_presentes', False):
            if not plant_data.get('toxica_mascotas', False):
                explanations.append("üêæ SEGURIDAD: Completamente segura para mascotas")
        
        # Explicaciones especiales para plantas nativas
        if plant_data.get('planta_nativa', False):
            explanations.append("üå≥ NATIVA TDF: Especie nativa de Tierra del Fuego, perfectamente adaptada al clima austral y parte del patrimonio natural")
        
        # Ventajas espec√≠ficas para Tierra del Fuego
        ventajas_fueguinas = {
            'sansevieria': "‚ùÑÔ∏è VENTAJA FUEGUINA: Extremadamente resistente a la calefacci√≥n constante del invierno fueguino",
            'zz_plant': "üî• VENTAJA FUEGUINA: Tolera perfectamente el aire seco de los sistemas de calefacci√≥n locales",
            'pothos': "üè† VENTAJA FUEGUINA: Purifica el aire en espacios cerrados durante los largos inviernos",
            'albahaca': "üåø VALOR CULINARIO: Hierbas frescas durante inviernos cuando productos frescos son costosos en TDF",
            'perejil': "üåø VITAMINAS FRESCAS: Proporciona nutrientes frescos durante todo el a√±o fueguino",
            'oregano': "üåø CONDIMENTO LOCAL: Resistente al aire seco y proporciona sabor fresco todo el a√±o",
            'ciboulette': "üåø RESISTENCIA AL FR√çO: Una de las pocas hierbas que tolera el clima fueguino",
            'lavanda': "üå¨Ô∏è VENTAJA FUEGUINA: Una vez establecida, resiste los vientos patag√≥nicos y heladas ocasionales",
            'romero': "‚ùÑÔ∏è VENTAJA FUEGUINA: Resistente al clima fueguino y proporciona hierbas frescas todo el a√±o",
            'lenga': "üçÇ S√çMBOLO FUEGUINO: √Årbol emblem√°tico con espectacular coloraci√≥n oto√±al dorada, patrimonio de la regi√≥n",
            'nire': "üå≥ ADAPTACI√ìN PERFECTA: Nativo que resiste perfectamente los vientos patag√≥nicos",
            'calafate': "ü´ê TRADICI√ìN FUEGUINA: Frutos comestibles azules, parte del folklore patag√≥nico ('quien come calafate, vuelve')",
            'mata_negra': "üí™ RESISTENCIA EXTREMA: Pr√°cticamente no requiere cuidados, adaptada a condiciones adversas",
            'coiron': "üåæ PAISAJE AUT√âNTICO: Pasto nativo que forma parte del paisaje estepario fueguino"
        }
        
        plant_id = recommendation['planta_id']
        if plant_id in ventajas_fueguinas:
            explanations.append(ventajas_fueguinas[plant_id])
        
        # Cuidados especiales
        cuidados_especiales = {
            'ficus': "‚ö†Ô∏è CUIDADO: Mantener alejada de corrientes de aire fr√≠o cerca de ventanas",
            'monstera': "‚ö†Ô∏è ESPACIO: Necesita ubicaci√≥n con espacio amplio para crecer",
            'lenga': "‚ö†Ô∏è PACIENCIA: Requiere a√±os para establecerse, pero vale la pena la espera",
            'pothos': "‚ö†Ô∏è MASCOTAS: Mantener alejada de mascotas por toxicidad"
        }
        
        if plant_id in cuidados_especiales:
            explanations.append(cuidados_especiales[plant_id])
        elif plant_data.get('categoria') == 'comestible':
            explanations.append("üí° CONSEJO: Ubicar en ventana sur para maximizar horas de luz")
        
        return "\n".join(explanations)
    
    def _is_light_compatible(self, user_light, plant_light):
        """
        Eval√∫a compatibilidad de requerimientos de luz
        """
        light_levels = {'escasa': 1, 'moderada': 2, 'abundante': 3}
        return light_levels.get(user_light, 2) >= light_levels.get(plant_light, 2)
    
    def get_plant_info(self, plant_id):
        """
        Obtiene informaci√≥n detallada de una planta espec√≠fica
        """
        if plant_id in self.plantas:
            return self.plantas[plant_id]
        return None
    
    def get_available_plants(self):
        """
        Retorna lista de todas las plantas disponibles
        """
        return [
            {
                'id': plant_id,
                'nombre': data['nombre_comun'],
                'categoria': data['categoria'],
                'dificultad': data['dificultad']
            }
            for plant_id, data in self.plantas.items()
        ]
    
    def get_plants_by_location_and_objective(self, location, objective=None):
        """
        Retorna plantas filtradas por ubicaci√≥n y objetivo espec√≠fico
        """
        compatible_plants = []
        for plant_id, data in self.plantas.items():
            categoria = data.get('categoria', 'interior')
            
            # Filtro por ubicaci√≥n
            location_ok = False
            if location == 'interior' and categoria in ['interior', 'comestible', 'ambos']:
                location_ok = True
            elif location == 'exterior_protegido' and categoria in ['exterior_protegido', 'comestible', 'ambos']:
                location_ok = True
            elif location == 'ambos':
                location_ok = True
            
            # Filtro por objetivo
            objective_ok = True  # Por defecto compatible
            if objective == 'comestible':
                objective_ok = (categoria == 'comestible' or plant_id == 'calafate')
            elif objective == 'nativas':
                objective_ok = data.get('planta_nativa', False)
            elif objective == 'purificar_aire':
                objective_ok = data.get('purifica_aire', False)
            
            if location_ok and objective_ok:
                compatible_plants.append({'id': plant_id, 'data': data})
        
        return compatible_plants
    
    def get_session_history(self):
        """
        Retorna el historial de la sesi√≥n actual
        """
        return self.session_history
    
    def reset_session(self):
        """
        Reinicia el historial de la sesi√≥n
        """
        self.session_history = []
    
    def validate_conditions(self, conditions):
        """
        Valida que las condiciones del usuario sean v√°lidas
        """
        required_fields = ['ubicacion', 'luz_disponible', 'experiencia_usuario']
        valid_values = {
            'ubicacion': ['interior', 'exterior_protegido', 'ambos'],
            'luz_disponible': ['escasa', 'moderada', 'abundante'],
            'humedad_interior': ['baja', 'media', 'alta'],
            'experiencia_usuario': ['principiante', 'intermedio', 'avanzado'],
            'tiempo_disponible': ['bajo', 'medio', 'alto'],
            'espacio_disponible': ['peque√±o', 'mediano', 'grande'],
            'objetivo_principal': ['decorativo', 'purificar_aire', 'comestible', 'nativas', 'facil_cuidado']
        }
        
        errors = []
        
        # Verificar campos requeridos
        for field in required_fields:
            if field not in conditions:
                errors.append(f"Campo requerido faltante: {field}")
        
        # Verificar valores v√°lidos
        for field, value in conditions.items():
            if field in valid_values and value not in valid_values[field]:
                errors.append(f"Valor inv√°lido para {field}: {value}")
        
        return {
            'valid': len(errors) == 0,
            'errors': errors
        }

# Funci√≥n de conveniencia para uso directo
def get_plant_recommendations(user_conditions):
    """
    Funci√≥n simple para obtener recomendaciones
    """
    system = PlantExpertSystem()
    return system.get_plant_recommendation(user_conditions)